/*  

10진법
12345 

= 10000 + 2000 + 300 + 40 + 5
= 1*10^4 + 2*10^3 + 3*10^2 + 4*10^1 + 5*10^0
자릿수가 한개 증가 할 수록 10배가 늘어난다

2진법 - 0, 1로만 구성 
100110(2) = 1*2^5 + 1*10^2 + 1*2^1 = 38
한 자릿수가 증가 할때 마다 2배가 늘어난다.

2진법을 저장할때
int - 32비트 (0과 1로 표현할 수 있는 자릿수의 갯수)= 비트

32비트 = 4바이트 

00000000 00000000 00000000 00000101 // 5라는 숫자를 저장 
5 = 101(2) 
37 = 100101(2)

8비트 = 1바이트 
바이트 : 컴퓨터에서 데이터를 처리하는 가장 작은 단위
비트 하나하나 따지기 힘드니까 가장 작은 단위로 만든 

과학에서 1mol 분자 하나 단위가 새기가 힘드니까. 만들어짐 (이와 같은것 ) */

/*컴퓨터에서
00000000 00000000 00000000 00000000
맨 첫번째 자리는 부호를 저장하는데 쓰인다.
양수 일땐 0 음수 일땐 1

음수로 -1을 저장하고 싶을때 : 11111111 11111111 11111111 11111111
이곳에 +1을 더하면 다 0이 되고 앞에 1이 하나 더 붙는다.
앞에 붙는 1은 다 무시되고 다 0 이 되버린다.
= 이런식으로 컴퓨터에서는 특별한 방법으로 처리를 한다.
11111111 11111111 11111111 11111111 = -1 이 된다. */


/*자료형 - 정수형, 실수형*/

/*정수형 
char (1바이트) - 문자를 담는 데 쓰임
short (2바이트)
long(4바이트) = -2147483648 ~ +2147483648 = -2^31 ~2^31 - 1 사이의 수의  개수는 2^32개 이다. 
자릿수가 32비트면 2^32 비트 개를 저장할 수 있다. 
long long (8바이트) 
int(시스템에 따라서 자동결정, 대체로 long) */

/*실수형
float (4바이트)
double (8바이트) 

unsigned, signed 

부호 없는 정수형을 만들고 싶을때 : unsigned int a;

long형에 unsigned할 경우 : 0 ~ + 42000000~~~ = 2^32 -1 = 4294967295
대신 마이너스 저장하지 않는다. 
unsigned double f; 

void : 리턴 값이 없는 함수의 자료형 

bool : 참, 거짓을 저장하는 저장 ( bool사용하면 8비트나 먹기 때문에. 한개의 변수 인데도(사실상 -를 쓰는것과 비슷함) (Char) ) 

이처럼 마이너스를 사용하고 싶지 않을때 사용가능*/
