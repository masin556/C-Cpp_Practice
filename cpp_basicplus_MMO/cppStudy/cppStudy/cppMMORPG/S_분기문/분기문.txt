if (isDead)
	cout << "몬스터를 처치했습니다." <<endl; 만약 죽었으면 이 줄이 실행되는 

	현업에서는 한칸 뛰고 괄호를 붙여서 사용

if (!isDead) or if (isDead == false)
하나만 판별할 때는 ! 괜찮지만  == false를 표시 하는 편이 가독성면에서 좋다. 

if를 두번 실행해서 체크하면 성능적인 낭비다. 
다른 경로로 분기 시켜주면. 좀더 났다
if else 문을 사용해서 사용하는 편이 좋다. 

if문이 여러줄일 경우에는 { } 를 꼭 넣어줘야 한다.

스타일에 따라 규칙에 따라 다르다. 한줄만 들어가면 안넣는 경우도 있음


만약 기획자가 몬스터가 죽지 않았더라면 바로 반격이 아닌. 체력이 20보다 적으면 몬스터가 도망가게 해달라
라는 주문이 들어온다면. 
else에서 한번더 체크

안에 중첩해서 많이 사용하게 될 것이다. 

점점 if문이 많아지면 헷갈리게 된다. 
계속 중첩 시키기 보다 간략하게 만드는 편이 좋다. 

else if 사용 
else if 가 cmp로 비교하는 부분이 그냥 한번더 나오게 된다. 


	const int ROCK = 0;
	const int PAPER = 1;
	const int  SCISSORS = 2;

	int input = ROCK;

	if (input == ROCK)
		cout << "바위" << endl;
	else if (input == PAPER)
		cout << "보" << endl;
	else if (input == SCISSORS)
		cout << "가위" << endl;
	else
		cout << "장난 치냐?" << endl;

이런식의 코드는 너무 반복 되는 부분이 많다. 

이럴 때 사용할 수 있는 switch 문이다. 

input의 값을 보고 해당 경우라면 case 에 있는 것 을 보고 그것을 출력 

break누락시 아랫줄도 같이 실행 되버린다. 그래서 break가 있어야 한다.
(들어온것은 자유지만. 나가는 것은 break문이 있어야한다.)

또한 Switch 문에서 default는 case에 원하는 경우가 없다면 default를 실행하게 된다. 
= 최종적으로 실행할 수 있는 안전 장치?


if else 나 switch 부분 모드 cmp 하고 jmp 하고 차이가 없고. 
가독성 차원에서 해주는. 


switch 문이 if else를 완전히 대체할 수 는 없다. 
switch는 정수개념만 넣을 수있다. 
float형을 넣어주게 되면 빨간줄이 뜬다. 

C# 은 문자열 도넣을 수 있다. 차이점. 

